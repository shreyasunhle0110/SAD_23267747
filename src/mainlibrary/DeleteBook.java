/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainlibrary;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import static mainlibrary.AppConstants.*;

/**
 *
 * @author bikash
 */
public class DeleteBook extends javax.swing.JFrame {

    private static final Logger logger = LogManager.getLogger(DeleteBook.class);

    /**
     * Creates new form IssueBookForm
     */
    public DeleteBook() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        UserName = new javax.swing.JTextField();
        BookID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font(AppConstants.UBUNTU, 0, 20)); // NOI18N
        jLabel1.setText("Book ID");

        jLabel2.setFont(new java.awt.Font(AppConstants.UBUNTU, 0, 20)); // NOI18N
        jLabel2.setText("Password");

        jButton1.setFont(new java.awt.Font(AppConstants.UBUNTU, 0, 20)); // NOI18N
        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font(AppConstants.UBUNTU, 0, 18)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        UserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font(AppConstants.UBUNTU, 0, 20)); // NOI18N
        jLabel3.setText("User ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(262, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2))
                                .addGap(290, 290, 290))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BookID, javax.swing.GroupLayout.PREFERRED_SIZE, 335,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, 335,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 319,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(79, 79, 79)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(BookID, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 36,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71,
                                        Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(37, 37, 37)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        String Pass = String.valueOf(password.getPassword());
        String userID = UserName.getText();
        int bookIDValue;

        try {
            bookIDValue = Integer.parseInt(BookID.getText());
        } catch (NumberFormatException ex) {
            showError("Invalid Book ID format. Please enter a number.", "Invalid Book ID format: " + BookID.getText(), ex);
            return;
        }

        if (isEmpty(userID) || isEmpty(Pass)) {
            showError("User ID and Password cannot be empty.", "Attempted deletion with empty User ID or Password.", null);
            return;
        }

        if (!LibrarianDao.validate(userID, Pass)) {
            showError("Invalid Librarian Credentials", "Invalid librarian credentials provided. UserID: " + userID, null);
            return;
        }

        deleteBook(bookIDValue, userID);
    }// GEN-LAST:event_jButton1ActionPerformed

    private void deleteBook(int bookIDValue, String userID) {
        try (Connection con = DB.getConnection()) {
            if (con == null) {
                showError("Database connection error.", "Failed to establish database connection.", null);
                return;
            }

            if (isBookIssued(con, bookIDValue)) {
                showError("Book is Issued", "Attempted to delete an issued book. BookID: " + bookIDValue, null);
                return;
            }

            if (deleteBookById(con, bookIDValue)) {
                JOptionPane.showMessageDialog(this, "Book is Deleted", "Deleted!", JOptionPane.INFORMATION_MESSAGE);
                logger.info("Book deleted successfully. BookID: {}", bookIDValue);
                UserName.setText("");
                password.setText("");
                BookID.setText("");
            } else {
                showError("Unable to delete book", "Failed to delete book. BookID: " + bookIDValue, null);
            }
        } catch (SQLException ex) {
            showError("Database error occurred while deleting book", "SQL Exception occurred while deleting book. BookID: " + bookIDValue, ex);
        } catch (Exception ex) {
            showError("Error occurred while deleting book", "Exception occurred while deleting book. BookID: " + bookIDValue, ex);
        }
    }

    private boolean isBookIssued(Connection con, int bookIDValue) throws SQLException {
        try (PreparedStatement psCheckIssued = con.prepareStatement("SELECT * FROM IssuedBook WHERE BookID = ?")) {
            psCheckIssued.setInt(1, bookIDValue);
            try (java.sql.ResultSet rs = psCheckIssued.executeQuery()) {
                return rs.next();
            }
        }
    }

    private boolean deleteBookById(Connection con, int bookIDValue) throws SQLException {
        try (PreparedStatement psDeleteBook = con.prepareStatement("DELETE FROM Books WHERE BookID = ?")) {
            psDeleteBook.setInt(1, bookIDValue);
            return psDeleteBook.executeUpdate() > 0;
        }
    }

    private boolean isEmpty(String s) {
        return s == null || s.trim().isEmpty();
    }

    private void showError(String userMsg, String logMsg, Exception ex) {
        JOptionPane.showMessageDialog(this, userMsg, AppConstants.ERROR_MSG, JOptionPane.ERROR_MESSAGE);
        if (ex != null) {
            logger.error(logMsg, ex);
        } else {
            logger.warn(logMsg);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        LibrarianSuccess.ThisLogined.setVisible(true);
    }// GEN-LAST:event_jButton2ActionPerformed

    private void UserNameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_UserNameActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_UserNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeleteBook.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeleteBook.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeleteBook.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeleteBook.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeleteBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookID;
    private javax.swing.JTextField UserName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField password;
    // End of variables declaration//GEN-END:variables
}
